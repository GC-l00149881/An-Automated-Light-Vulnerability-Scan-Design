from colorama import init
from colorama import Fore
# used for producing colored terminal text
from termcolor import colored
# also used for ANSI Color formatting for terminal output
from art import *
# used to produce 'ASCII' or 'computer text' art

init()
import nmap
# imports the nmap network scanner module for use

scanner = nmap.PortScanner()
# assigns the scanner 'variable' for use with the nmap.PortScanner() 'object'

print(colored("_"*53, "cyan"))
print(colored("Welcome to an Atlantic Technological University (ATU)", "cyan"))
print(colored("ostensibly 'Lightweight' Vulnerability Scanning tool", "cyan"))
art = text2art("ATU", font='isometric3')
print(Fore.CYAN + art)
print("Initiating Python-NMap version: ", scanner.nmap_version())
print(colored("_"*53, "cyan"))
print(colored("This tool is for authorized ATU personnel only, by", "cyan"))
print(colored("using this tool, users acknowledge notice of, and ", "cyan"))
print(colored("agreement with, ATU’s Acceptable Use of Information", "cyan"))
print(colored("Technology Resources Policy (“AUP”).  Unauthorized", "cyan"))
print(colored("use of this tool may result in administrative or", "cyan"))
print(colored("disciplinary action, civil or criminal penalties, ", "cyan"))
print(colored("and/or other sanctions as outlined in ATU's AUP.", "cyan"))
print(colored("_"*53, "cyan"))

try:
    input(colored("Press 'Enter' to proceed...", "cyan"))
except SyntaxError:
    pass
print(colored("_"*53, "cyan"))

import os
# imports the os module, which allows interaction with the underlying operating system and its functionality
import subprocess
# imports the subprocess module, which allows use of os subprocesses directly from the Python IDE

def mainMenu(): # 'defining' a main menu function for user interaction/scan type selection
    # the colon : signals the start of the function body
    response = int(input(colored("""Please select a scan type to initialize:\n
1 Host Discovery
2 OS Discovery
3 Port Discovery
4 Port Discovery In a Range
5 'Vuln' vulnerability scan
6 'Vulners' vulnerability scan
7 'Vulscan' vulnerability scan
8 Clear The Terminal
9 Exit The Program
    \n:""", 'cyan')))
    text = colored("\nYou have selected scan type: ", 'cyan')
    print(text, response)
    print(colored("_"*53, "cyan"))

    # using an if, elif, else conditional statement to automate user interaction/scan type selection
    if response == 1:
        Host_DisCov()
        mainMenu()
    elif response == 2:
        os_discovery()
        mainMenu()
    elif response == 3:
        port_discovery()
        mainMenu()
    elif response == 4:
        port_discoveryInaRange()
        mainMenu()
    elif response == 5:
        vuln_vulnerabilityScan()
        mainMenu()
    elif response == 6:
        vulners_vulnerabilityScan()
        mainMenu()
    elif response == 7:
        vulscan_vulnerabilityScan()
        mainMenu()
    elif response == 8:
        clear()
        mainMenu()
    elif response == 9:
        clear()
        quit_Program()
    else:
        print("You chose poorly ಠ_ಠ\n")
        mainMenu()

from datetime import datetime
# imports the datetime 'class' from the datetime 'module' allowing
# the use of both date and time 'objects'

date = datetime.now().strftime("%d_%m_%Y-%I:%M:%S_%p")
# the date 'variable' will store the datetime 'object' which uses
# the strftime() method to create a formatted string representing the date and time
# in a day (%d) month (%m) year (%Y) hour (%I) minute (%M) second (%S) am/pm (%p) format

def Host_DisCov(): # 'defining' a host discovery function
    hosts = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-PE', '-PS443', '-PA80', '-PP', '-oN', f'/home/l00149881/Documents/HostDiscovery_{date}.txt', hosts])
    # -iL (reads target specifications from a 'TargetList' file)
    # -PE (a default ICMP echo) -PS443 (a TCP SYN packet to port 443), -PA80 (a TCP ACK packet to port 80)
    # -PP (an ICMP timestamp request) -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)

    # other combinations can also be used for discovery purposes, for example...

    # ['nmap', '-n', '-v', '-Pn', '-sn', '-sL', '-PE', '-PP', '-PM', '-PO', '-oN', f'/home/l00149881/Documents/HostDiscovery_{date}.txt', host])
    # -n (no dns resolution) -v (increases verbosity) -Pn (disables host discovery, port scan only)
    # -sn (a 'ping scan', disables port scanning, host discovery only) -sL (lists targets)
    # -PE (ICMP echo request) -PP (ICMP timestamp request) -PM (ICMP address mask request)
    # -PO (ip protocol ping) -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)

    # or...

    # 'nmap', '-n', '-sn', '-PE', '-PP', '-PS21,22,23,25,80,113,443,31339', '-PA80,113,443,10042',
    # -PS (TCP SYN discovery on specific ports...), -PA (TCP ACK discovery on specific ports...)
    print(colored('_'*53, 'cyan'))

def os_discovery(): # 'defining' an operating system discovery function
    os = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-n', '-F', '-A', '-v', '-Pn', '-sS', '-O', '-oN', f'/home/l00149881/Documents/OSDiscovery_{date}.txt', os])
    # -iL (reads target specifications from a 'TargetList' file)
    # -n (no dns resolution) -F (Fast port scan, 100 ports)
    # -A (aggressive OS, and version detection, script, and traceroute scan)
    # -v (increases verbosity) -Pn (disables host discovery, port scan only)
    # -sS (TCP SYN 'stealth' scan) -O (operating system ‘fingerprinting’ scan)
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def port_discovery(): # 'defining' a port discovery function
    port = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-n', '-v', '-Pn', '-sV', '-oN', f'/home/l00149881/Documents/PortDiscovery_{date}.txt', port])
    # -iL (reads target specifications from a 'TargetList' file)
    # -n (no dns resolution) -v (increases verbosity)
    # -Pn (disables host discovery, port scan only)
    # -sV (determine which service version is running on the port)
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def port_discoveryInaRange(): # 'defining' a port range discovery function
    ports = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-p', '1-100', '-oN', f'/home/l00149881/Documents/PortDiscoveryInRange_{date}.txt', ports])
    # -iL (reads target specifications from a 'TargetList' file)
    # -p 1-100 (scan port range 1-100, this can be reconfigured as required, i.e. 1-1000)
    # alternatively -p- can be used instead to scan the full port range, i.e. 1-65535
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def vuln_vulnerabilityScan(): # 'defining' the vuln NSE script vulnerability scan function
    vuln = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-p', '1-100', '--script', 'vuln', '-oN', f'/home/l00149881/Documents/VulnScan_{date}.txt', vuln])
    # -iL (reads target specifications from a 'TargetList' file)
    # -p 1-100 (scan port range 1-100)
    # --script vuln (select and run all scripts within the 'vuln' NSE script category)
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def vulners_vulnerabilityScan(): # 'defining' the vulners NSE script vulnerability scan function
    vulners = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-sV', '--script', 'vulners', '-oN', f'/home/l00149881/Documents/VulnersScan_{date}.txt', vulners])
    # -iL (reads target specifications from a 'TargetList' file)
    # -sV (determine which service version is running on the port)
    # --script vulners (select and run the 'vulners' NSE script)
    # please note that the 'vulners' NSE script requires the -sV flag as
    # it needs software versions for cve comparison, but can work without it
    # if the -- script http-vulners-regex is also run
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def vulscan_vulnerabilityScan(): # 'defining' the vulscan NSE script vulnerability scan function
    vulscan = input(colored("Press Enter to scan targets selected from a file...", 'cyan'))
    print(colored('_'*53, 'cyan'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-sV', '--script=vulscan', '-oN', f'/home/l00149881/Documents/VulscanScan_{date}.txt', vulscan])
    # -iL (reads target specifications from a 'TargetList' file)
    # -sV (determine which service version is running on the port)
    # --script=vulscan (select and run the 'vulscan' NSE script)
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_'*53, 'cyan'))

def clear(): # 'defining' the clear terminal screen function
    os.system('cls||clear')

def quit_Program(): # 'defining' the quit program function
    print(colored('Something ends, something begins...', 'cyan'))
    print(colored('_' * 53, 'cyan'))
    quit()

if __name__ == '__main__':
    mainMenu()

