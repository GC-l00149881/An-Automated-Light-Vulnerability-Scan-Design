from colorama import init
from colorama import Fore
# used for producing colored terminal text
from termcolor import colored
# also used for ANSI Color formatting for terminal output
from art import *

# used to produce 'ASCII' or 'computer text' art

init()
import nmap

# imports the nmap network scanner module for use

scanner = nmap.PortScanner()
# assigns the scanner 'variable' for use with the nmap.PortScanner() 'object'

print(colored("_" * 53, "yellow"))
print(colored("Welcome to an Atlantic Technological University (ATU)", "yellow"))
print(colored("ostensibly 'Lightweight' Vulnerability Scanning tool", "yellow"))
art = text2art("ATU", font='isometric3')
print(Fore.YELLOW + art)
print("Initiating Python-NMap version: ", scanner.nmap_version())
print(colored("_" * 53, "yellow"))
print(colored("This tool is for authorized ATU personnel only, by", "yellow"))
print(colored("using this tool, users acknowledge notice of, and ", "yellow"))
print(colored("agreement with, ATU’s Acceptable Use of Information", "yellow"))
print(colored("Technology Resources Policy (“AUP”).  Unauthorized", "yellow"))
print(colored("use of this tool may result in administrative or", "yellow"))
print(colored("disciplinary action, civil or criminal penalties, ", "yellow"))
print(colored("and/or other sanctions as outlined in ATU's AUP.", "yellow"))
print(colored("_" * 53, "yellow"))

try:
    input(colored("Press 'Enter' to proceed...", "yellow"))
except SyntaxError:
    pass
print(colored("_" * 53, "yellow"))

import os
# imports the os module, which allows interaction with the underlying operating system and its functionality
import subprocess

# imports the subprocess module, which allows use of os subprocesses directly from the Python IDE

def mainMenu():  # 'defining' a main menu function for user interaction/scan type selection
    # the colon : signals the start of the function body
    response = int(input(colored("""Please select a scan type to initialize:\n
1 'HttpEnum' vulnerability scan
2 'HttpCrsf' vulnerability scan
3 'HttpShellshock' vulnerability scan
4 'HttpSqlInjection' vulnerability scan
5 'FtpVsftpdBackdoor' vulnerability scan
6 'HttpSlowLoris' vulnerability scan
7 'HttpDombasedXss' vulnerability scan
8 Clear The Terminal
9 Exit The Program
    \n:""", 'yellow')))
    text = colored("\nYou have selected scan type: ", 'yellow')
    print(text, response)
    print(colored("_" * 53, "yellow"))

    # using an if, elif, else conditional statement to automate user interaction/scan type selection
    if response == 1:
        HttpEnum_vulnerabilityScan()
        mainMenu()
    elif response == 2:
        HttpCsrf_vulnerabilityScan()
        mainMenu()
    elif response == 3:
        HttpShellshock_vulnerabilityScan()
        mainMenu()
    elif response == 4:
        HttpSqlInjection_vulnerabilityScan()
        mainMenu()
    elif response == 5:
        FtpVsftpdBackdoor_vulnerabilityScan()
        mainMenu()
    elif response == 6:
        HttpSlowLoris_vulnerabilityScan()
        mainMenu()
    elif response == 7:
        HttpDombasedXss_vulnerabilityScan()
        mainMenu()
    elif response == 8:
        clear()
        mainMenu()
    elif response == 9:
        clear()
        quit_Program()
    else:
        print("You chose poorly ಠ_ಠ\n")
        mainMenu()

from datetime import datetime

# imports the datetime 'class' from the datetime 'module' allowing
# the use of both date and time 'objects'

date = datetime.now().strftime("%d_%m_%Y-%I:%M:%S_%p")


# the date 'variable' will store the datetime 'object' which uses
# the strftime() method to create a formatted string representing the date and time
# in a day (%d) month (%m) year (%Y) hour (%I) minute (%M) second (%S) am/pm (%p) format

def HttpEnum_vulnerabilityScan():  # 'defining' a web application enumeration function
    HttpEnum = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '--script=http-enum', '-oN', f'/home/l00149881/Documents/HttpEnum_{date}.txt', HttpEnum])
    # -iL (reads target specifications from a 'TargetList' file)
    # --script=http-enum (select and run the 'http-enum' NSE discovery/vuln script)
    # detects and enumerates directories used by web applications, including their versions)
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def HttpCsrf_vulnerabilityScan():  # 'defining' a cross site scripting vulnerability scan function
    HttpCsrf = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-p 80, 443', '--script', 'http-csrf.nse', '-oN', f'/home/l00149881/Documents/HttpCsrf_{date}.txt', HttpCsrf])
    # -iL (reads target specifications from a 'TargetList' file)
    # -p 80, 443 (scan ports 80: http, 443: https)
    # --script http-csfr.nse (select and run the 'http-csrf' NSE script)
    # detects Cross Site Request Forgeries (CSRF) vulnerabilities
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def HttpShellshock_vulnerabilityScan():  # 'defining' a shellshock vulnerability scan function
    HttpShellshock = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-sV', '-p-', '--script', 'http-shellshock', '-oN', f'/home/l00149881/Documents/HttpShellschock_{date}.txt', HttpShellshock])
    # -iL (reads target specifications from a 'TargetList' file)
    # -sV (determine which service version is running on the port)
    # -p- (scan all ports) --script http-shellshock (select and run the 'http-shellshock' NSE script)
    # detects a 'bash script' vulnerability in web applications, a backdoor that can be used
    # to run malicious script on servers and systems
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def HttpSqlInjection_vulnerabilityScan():  # 'defining' a http sql injection vulnerability scan function
    HttpSqlInjection = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '--script=http-sql-injection', '-oN', f'/home/l00149881/Documents/HttpSqlInjection_{date}.txt', HttpSqlInjection])
    # -iL (reads target specifications from a 'TargetList' file)
    # --script=http-sql-injection (select and run the http-sql-injection NSE script)
    # which crawls, or 'spiders', a http server looking for URL entries that are susceptable to
    # SQL injection attack -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def FtpVsftpdBackdoor_vulnerabilityScan():  # 'defining' the vsFTPd 2.3.4 backdoor vulnerability scan function
    FtpVsftpdBackdoor = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-p 21', '--script', 'ftp-vsftpd-backdoor', '-oN', f'/home/l00149881/Documents/FtpVsftpdBackdoor_{date}.txt', FtpVsftpdBackdoor])
    # -iL (reads target specifications from a 'TargetList' file) -p 21 (scan port 21)
    # --script ftp-vsftpd-backdoor (select and run the ftp-vsftpd-backdoor NSE script)
    # scans for the vsFTPd 2.3.4 backdoor, see CVE-2011-2523, which can open a shell on port 6200/tcp
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def HttpSlowLoris_vulnerabilityScan():  # 'defining' the Http Slowloris vulnerability scan function
    HttpSlowLoris = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '--script', 'http-slowloris-check', '-oN', f'/home/l00149881/Documents/HttpSlowLoris_{date}.txt', HttpSlowLoris])
    # -iL (reads target specifications from a 'TargetList' file)
    # --script http-slowloris-check (select and run the 'http-slowloris-check' NSE script)
    # scans a web server for vulnerabilities related to the Slowloris 'DoS attack'
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'magenta'))

def HttpDombasedXss_vulnerabilityScan():  # 'defining' the HttpDombasedXss vulnerability scan function
    HttpDombasedXss = input(colored("Press Enter to scan targets selected from a file...", 'yellow'))
    print(colored('_' * 53, 'yellow'))
    subprocess.check_call(
        ['nmap', '-iL', '/home/l00149881/PycharmProjects/pythonProject/TargetList', '-p80', '--script', 'http-dombased-xss.nse', '-oN', f'/home/l00149881/Documents/HttpDombasedXss_{date}.txt', HttpDombasedXss])
    # -iL (reads target specifications from a 'TargetList' file)
    # -p 80 (scan port 80) --script http-dombased-xss.nse (select and run the 'http-dombased-xss' NSE script)
    # scans for 'type-0 XSS', or cross site scripting, vulnerabilities
    # -oN (output/save results to the specified .txt file)
    # f' {date}.txt' (adds the scan date and runtime to the .txt filename)
    print(colored('_' * 53, 'yellow'))

def clear():  # 'defining' the clear terminal screen function
    os.system('cls||clear')

def quit_Program():  # 'defining' the quit program function
    print(colored('Something ends, something begins...', 'yellow'))
    print(colored('_' * 53, 'yellow'))
    quit()

if __name__ == '__main__':
    mainMenu()

